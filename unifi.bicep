@description('The location in which the resources should be deployed.')
param Location string = 'westeurope'

param RegistryUsername string

param StorageName string
param ContainerInstanceName string

@secure()
param RegistryPassword string

var DataVolumeName = 'data-volume'
var LogVolumeName = 'log-volume'
var CertVolumeName = 'cert-volume'

resource StorageAccount 'Microsoft.Storage/storageAccounts@2022-09-01' = {
  name: StorageName
  location: Location
  kind: 'StorageV2'
  sku: {
    name: 'Standard_LRS'
  }
  properties: {
    minimumTlsVersion: 'TLS1_2'
  }
}

resource FileService 'Microsoft.Storage/storageAccounts/fileServices@2022-09-01' = {
  name: 'default'
  parent: StorageAccount
}

resource DataShareData 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-09-01' = {
  name: 'unifi-data'
  parent: FileService
}

resource DataShareLog 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-09-01' = {
  name: 'unifi-log'
  parent: FileService
}

resource DataShareCert 'Microsoft.Storage/storageAccounts/fileServices/shares@2022-09-01' = {
  name: 'unifi-cert'
  parent: FileService
}

resource LogAnalytics 'Microsoft.OperationalInsights/workspaces@2022-10-01' ={
  name: 'la-ldo-unifi'
  location: Location
  properties:{
    retentionInDays: 30
    workspaceCapping: {
      dailyQuotaGb: 1
    }
  }
}

resource ContainerInstance 'Microsoft.ContainerInstance/containerGroups@2022-09-01' = {
  name: ContainerInstanceName
  identity: {
    type: 'SystemAssigned'
  }
  location: Location
  properties: {
    diagnostics:{
      logAnalytics: {
        workspaceId: LogAnalytics.properties.customerId
        workspaceKey: listKeys(LogAnalytics.id, LogAnalytics.apiVersion).primarySharedKey
      }
    }
    containers: [
      {
        name: 'unifi-controller'
        properties: {
          image: 'jacobalberty/unifi'
          resources: {
            requests: {
              cpu: 1
              memoryInGB: 2
            }
          }
          environmentVariables: [
            {
              name: 'TZ'
              value: 'Europe/Brussels'
            }
          ]
          ports: [
            {
              port: 8443
              protocol: 'TCP'
            }
            {
              port: 3478
              protocol: 'UDP'
            }
            {
              port: 8080
              protocol: 'TCP'
            }
            {
              port: 6789
              protocol: 'TCP'
            }
          ]
          volumeMounts: [
            {
              name: DataVolumeName
              mountPath: '/unifi/data'
              readOnly: false
            }
            {
              name: LogVolumeName
              mountPath: '/unifi/log'
              readOnly: false
            }
            {
              name: CertVolumeName
              mountPath: '/unifi/cert'
              readOnly: false
            }
          ]
          readinessProbe: {
            httpGet: {
              port: 8443
              scheme: 'https'
              path: '/'
            }
            initialDelaySeconds: 10
            failureThreshold: 60
            periodSeconds: 10
            successThreshold: 1
          }
          livenessProbe: {
            httpGet: {
              port: 8443
              scheme: 'https'
              path: '/'
            }
            initialDelaySeconds: 10
            failureThreshold: 10
            periodSeconds: 10
            successThreshold: 1
          }
        }
      }
    ]
    ipAddress: {
      ports: [
        {
          port: 8443
          protocol: 'TCP'
        }
        {
          port: 3478
          protocol: 'UDP'
        }
        {
          port: 8080
          protocol: 'TCP'
        }
        {
          port: 6789
          protocol: 'TCP'
        }
      ]
      type: 'Public'
      autoGeneratedDomainNameLabelScope: 'TenantReuse'
      dnsNameLabel: 'ldounifi'
    }
    osType: 'Linux'
    restartPolicy: 'OnFailure'
    imageRegistryCredentials: [
      {
        server: 'hub.docker.com'
        username: RegistryUsername
        password: RegistryPassword
      }
    ]
    volumes: [
      {
        name: DataVolumeName
        azureFile: {
          shareName: DataShareData.name
          storageAccountName: StorageAccount.name
          storageAccountKey: StorageAccount.listKeys().keys[0].value
          readOnly: false
        }
      }
      {
        name: LogVolumeName
        azureFile: {
          shareName: DataShareLog.name
          storageAccountName: StorageAccount.name
          storageAccountKey: StorageAccount.listKeys().keys[0].value
          readOnly: false
        }
      }
      {
        name: CertVolumeName
        azureFile: {
          shareName: DataShareCert.name
          storageAccountName: StorageAccount.name
          storageAccountKey: StorageAccount.listKeys().keys[0].value
          readOnly: false
        }
      }
    ]
  }
}
